= Rhino - a Ruby ORM for HBase

Rhino is an object-relational mapping for Ruby and HBase[http://wiki.apache.org/lucene-hadoop/HBase].

== Getting started

=== Connect to HBase

Rhino uses the HBase Thrift API. You must first start HBase, then start the Thrift server. From the root HBase directory:

  bin/start-hbase.sh
  bin/hbase thrift start

The following code points Rhino to the Thrift server you just started (which by default listens on localhost:9090).
  
  Rhino::Table.connect('localhost', 9090)
  
=== Describe your table

A class definition like:

  class Page < Rhino::Table
    column_family :title
    column_family :contents
    column_family :links
    column_family :meta
    column_family :images
  end

...is mapped to the following HBase table (described in {HBase Query Language}[http://wiki.apache.org/lucene-hadoop/HBase/HBaseShell]

  CREATE TABLE pages(title:, contents:, links:, meta:, images:);
  
Or, in version 0.2's JRuby shell language:
  
  create 'pages', 'title', 'contents', 'links', 'meta', 'images'
  
=== Work with the data

==== Finding records

  page = Page.find('some-key')
  
==== Creating new records

  # data can be specified in the second argument of Page.new...
  page = Page.new('the-row-key', {:title=>"my title"})
  # ...or as attributes on the model
  page.contents = "<p>welcome</p>"
  puts "page is a new record before save" if page.new_record?
  page.save
  puts "after save, page is not a new record" if !page.new_record?

==== Reading and updating attributes

  # basic
  page = Page.find('some-key')
  puts "the old title is: #{page.title}"
  page.title = "another title"
  page.save
  puts "the new title is: #{page.title}"

  # you can also read from and write to specific columns in a column family -
  # here, meta: is a column family, and we're going to write to meta:author
  page = Page.find('some-key')
  # since we defined the meta: column family in our class definition, Rhino
  # knows we want to set the meta:author column
  page.meta_author = "John Doe"
  page.save
  puts "the author is: #{page.meta_author}"
  
==== Introspecting column families
  
  page = Page.new('yahoo.com', :title=>'Yahoo!', :meta_author=>'yang', :meta_language=>'en-US', :meta_charset=>'UTF-8')
  puts "meta columns are:"
  page.meta_column_full_names.each do |colname|
    puts " - #{colname} = #{page.send(colname)}"
  end

==== Setting timestamps and retrieving by timestamp
  
  a_week_ago = Time.now - 7 * 24 * 3600
  a_month_ago = Time.now - 30 * 24 * 3600
  
  newer_page = Page.create('google.com', {:title=>'newer google'}, {:timestamp=>a_week_ago})
  older_page = Page.create('google.com', {:title=>'older google'}, {:timestamp=>a_month_ago})
  
  # now you can find() by the timestamps you just set
  Page.find('google.com', :timestamp=>a_week_ago).title # => "newer google"
  Page.find('google.com', :timestamp=>a_month_ago).title # => "older google"
  
  # and if you just find() normally, you will get the most recent Page
  Page.find('google.com').title # => "newer google"
  
== More information

Read the specs in the spec/ directory to see more usage examples. Also look at the spec models in spec/spec_helper.rb.
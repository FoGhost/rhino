= Rhino - a Ruby ORM for HBase

Rhino is a Ruby object-relational mapping (ORM) for HBase[http://www.hbase.org].

=== Support & contact

Home page: http://rhino.lighthouseapp.com/projects/14879/home

Report issues at: http://rhino.lighthouseapp.com/projects/14879-rhino/tickets/new or by email to the author below

Author: Quinn Slack qslack@qslack.com[mailto:qslack@qslack.com]

== Getting started

=== Download Rhino

  git clone git://github.com/sqs/rhino.git

=== Installing HBase and Thrift

Since Rhino uses the HBase Thrift API, you must first install both HBase and Thrift. Downloading the latest trunk revisions of each is recommended, but if you encounter problems, try using the latest stable release instead. Here are the basic steps for installing both.

==== Installing HBase
  
  svn co http://svn.apache.org/repos/asf/hadoop/hbase/trunk hbase-core-trunk
  cd hbase-core-trunk
  ant
  
{More installation instructions}[http://wiki.apache.org/hadoop/Hbase/10Minutes] are available on the HBase Wiki.

==== Installing Thrift

Thrift[http://developers.facebook.com/thrift/] also requires the Boost C++ libraries; you'll have to get those on your own if your system does not have them.

  svn co http://svn.facebook.com/svnroot/thrift/trunk/ thrift-trunk
  cd thrift-trunk
  ./bootstrap.sh
  ./configure && make && sudo make install
  cd lib/rb
  sudo ruby setup.rb

==== Starting the HBase and Thrift servers

Once you have installed HBase and Thrift, start HBase, then start the Thrift server. From the root HBase directory, run these commands:

  bin/start-hbase.sh
  bin/hbase thrift start
  
Both servers need to be running to use Rhino. Occasionally, the Thrift server will be unable to connect to HBase. In that case, stop the Thrift server (ctrl-C), stop the HBase server (<tt>bin/stop-hbase.sh</tt>), and then rerun the above commands to restart both. To verify that HBase is running, try running the HBase shell (<tt>bin/hbase shell</tt>).

==== Using Rhino

Since Rhino is not yet packaged as a gem, you will have to <tt>require 'PATH_TO_RHINO/lib/rhino.rb'</tt> in your scripts.

=== Connect to HBase

The following code points Rhino to the Thrift server you just started (which by default listens on localhost:9090).
  
  Rhino::Model.connect('localhost', 9090)
  
=== Describe your table

A class definition like:

  class Page < Rhino::Model
    column_family :title
    column_family :contents
    column_family :links
    column_family :meta
    column_family :images
  end

...is mapped to the following HBase table (described in {HBase Query Language}[http://wiki.apache.org/lucene-hadoop/HBase/HBaseShell]

  CREATE TABLE pages(title:, contents:, links:, meta:, images:);
  
Or, in version 0.2's JRuby shell language:
  
  create 'pages', 'title', 'contents', 'links', 'meta', 'images'
  
=== Work with the data

==== Finding records

  page = Page.get('some-key')
  
==== Creating new records

  # data can be specified in the second argument of Page.new...
  page = Page.new('the-row-key', {:title=>"my title"})
  # ...or as attributes on the model
  page.contents = "<p>welcome</p>"
  puts "page is a new record before save" if page.new_record?
  page.save
  puts "after save, page is not a new record" if !page.new_record?

==== Reading and updating attributes

  # basic
  page = Page.get('some-key')
  puts "the old title is: #{page.title}"
  page.title = "another title"
  page.save
  puts "the new title is: #{page.title}"

  # you can also read from and write to specific columns in a column family -
  # here, meta: is a column family, and we're going to write to meta:author
  page = Page.get('some-key')
  # since we defined the meta: column family in our class definition, Rhino
  # knows we want to set the meta:author column
  page.meta_author = "John Doe"
  page.save
  puts "the author is: #{page.meta_author}"
  
==== Introspecting column families
  
  page = Page.new('yahoo.com', :title=>'Yahoo!', :meta_author=>'yang', :meta_language=>'en-US', :meta_charset=>'UTF-8')
  puts "meta columns are:"
  page.meta_column_full_names.each do |colname|
    puts " - #{colname} = #{page.send(colname)}"
  end

==== Setting timestamps and retrieving by timestamp
  
  a_week_ago = Time.now - 7 * 24 * 3600
  a_month_ago = Time.now - 30 * 24 * 3600
  
  newer_page = Page.create('google.com', {:title=>'newer google'}, {:timestamp=>a_week_ago})
  older_page = Page.create('google.com', {:title=>'older google'}, {:timestamp=>a_month_ago})
  
  # now you can get() by the timestamps you just set
  Page.get('google.com', :timestamp=>a_week_ago).title # => "newer google"
  Page.get('google.com', :timestamp=>a_month_ago).title # => "older google"
  
  # and if you just get() normally, you will get the most recent Page
  Page.get('google.com').title # => "newer google"
  
== More information

Read the specs in the spec/ directory to see more usage examples. Also look at the spec models in spec/spec_helper.rb.